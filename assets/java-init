#!/bin/bash
#set -x # this is for debugging purposes

# --- Configuration ---
DEFAULT_GROUP_ID="com.example"
DEFAULT_ARTIFACT_ID_PREFIX=""
DEFAULT_VERSION="1.0-SNAPSHOT"
DEFAULT_JAVA_VERSION="21"

# --- Helper Functions for generating project files ---

# Function to create a run.sh script for Ant
create_ant_run_script() {
  local project_dir=$1
  local project_name=$2
  cat <<EOF >"$project_dir/run.sh"
#!/bin/bash
#
# This script builds and runs the Ant project: $project_name
#
# Usage: ./run.sh
#

echo "Building and running Ant project: $project_name..."

# Execute the Ant 'run' target.
# If you consistently face 'error: invalid target release: 21.0.7',
# it means a system property is overriding your build.xml.
# In that case, uncomment the line below and comment the one above,
# ensuring your JDK is indeed Java 21.
# ant -Djava.version=21 run

ant run

if [ \$? -ne 0 ]; then
    echo "Ant build/run failed. Check the output for details."
    exit 1
fi
EOF
  chmod +x "$project_dir/run.sh"
}

# Function to create a README.md for Ant
create_ant_readme() {
  local project_dir=$1
  local project_name=$2
  cat <<EOF >"$project_dir/README.md"
# $project_name (Ant Project)

This is a simple Java project built with Apache Ant.

## How to Build and Run

1.  **Navigate to the project directory:**
    \`\`\`bash
    cd $project_name
    \`\`\`

2.  **Run the helper script:**
    This script will execute the Ant build and run your application.
    \`\`\`bash
    ./run.sh
    \`\`\`

    *(If the \`./run.sh\` fails with 'invalid target release: 21.0.7', try editing \`run.sh\` and uncommenting the line with \`-Djava.version=21\`)*

## Ant Commands

You can also use standard Ant commands directly:

* **Build & Run:** \`ant run\`
* **Compile only:** \`ant compile\`
* **Create JAR:** \`ant dist\`
* **Clean build artifacts:** \`ant clean\`

## Project Structure

\`\`\`
.
├── src/
│   └── main/
│       └── java/
│           └── App.java  (Your main application source)
├── lib/      (For any external JARs you manually add)
├── build.xml (Ant build script)
└── run.sh    (Helper script to build and run)
\`\`\`
EOF
}

# Function to create a run.sh script for Maven
create_maven_run_script() {
  local project_dir=$1
  local project_name=$2
  cat <<EOF >"$project_dir/run.sh"
#!/bin/bash
#
# This script builds and runs the Maven project: $project_name
#
# Usage: ./run.sh
#

echo "Building and running Maven project: $project_name..."

# Clean (deletes target directory), package (builds the JAR),
# and then executes the main class using exec-maven-plugin.
mvn clean package exec:java

if [ \$? -ne 0 ]; then
    echo "Maven build/run failed. Check the output for details."
    exit 1
fi
EOF
  chmod +x "$project_dir/run.sh"
}

# Function to create a README.md for Maven
create_maven_readme() {
  local project_dir=$1
  local project_name=$2
  cat <<EOF >"$project_dir/README.md"
# $project_name (Maven Project)

This is a simple Java project built with Apache Maven.

## How to Build and Run

1.  **Navigate to the project directory:**
    \`\`\`bash
    cd $project_name
    \`\`\`

2.  **Run the helper script:**
    This script will clean, build (package), and run your application.
    \`\`\`bash
    ./run.sh
    \`\`\`

## Maven Commands

You can also use standard Maven commands directly:

* **Compile:** \`mvn compile\`
* **Run Tests:** \`mvn test\`
* **Package (create JAR):** \`mvn package\`
* **Clean build artifacts:** \`mvn clean\`
* **Install to local repository:** \`mvn install\` (e.g., to make it available to other local Maven projects)
* **Run application:** \`mvn exec:java\` (requires the \`exec-maven-plugin\` configuration in \`pom.xml\`)
* **Full Build & Run:** \`mvn clean package exec:java\`

## Project Structure

\`\`\`
.
├── src/
│   ├── main/
│   │   └── java/      (Your main application source)
│   │       └── App.java
│   └── test/
│       └── java/      (Your test source)
├── pom.xml (Maven Project Object Model)
└── run.sh  (Helper script to build and run)
\`\`\`
EOF
}

# --- Project Creation Functions ---

create_maven_project() {
  local project_name=$1
  local group_id=$2
  local artifact_id=$3
  local version=$4
  local java_version=$5

  echo "Building Maven project: '$project_name'..."
  echo "  Group ID: $group_id"
  echo "  Artifact ID: $artifact_id"
  echo "  Version: $version"
  echo "  Java Version: $java_version"

  local original_invoke_dir=$(pwd)

  mvn archetype:generate \
    -DgroupId="$group_id" \
    -DartifactId="$artifact_id" \
    -DarchetypeArtifactId="maven-archetype-quickstart" \
    -DarchetypeVersion="1.4" \
    -DinteractiveMode="false" \
    -Djava.version="$java_version" \
    -Dmaven.compiler.source="$java_version" \
    -Dmaven.compiler.target="$java_version" \
    -Dname="$project_name" \
    -DoutputDirectory="$original_invoke_dir" # Ensure project is created in original invoke dir

  local project_root_dir="${original_invoke_dir}/${artifact_id}"
  echo "Attempting to change directory to: $project_root_dir"
  pushd "$project_root_dir" || {
    echo "Failed to enter project directory: $project_root_dir. Exiting."
    exit 1
  }
  pwd # Debug: print current directory after pushd

  # The archetype puts App.java and AppTest.java directly under the groupId path
  local base_java_dir="src/main/java/$(echo "$group_id" | sed 's/\./\//g')"
  local base_test_dir="src/test/java/$(echo "$group_id" | sed 's/\./\//g')"

  # --- DEBUG: Verify App.java after archetype generation ---
  local app_java_path="${base_java_dir}/App.java"
  echo "--- Debug: Checking App.java at: $(pwd)/$app_java_path ---"
  if [ -f "$app_java_path" ]; then
    cat "$app_java_path"
  else
    echo "Error: App.java not found at $(pwd)/$app_java_path immediately after archetype generation."
    echo "This indicates an unexpected archetype behavior or an issue with the constructed path."
    echo "Exiting, as App.java is a core file expected from the archetype."
    exit 1 # Exit if App.java is not found
  fi
  echo "-----------------------------------------------------"

  local original_test_path="${base_test_dir}/AppTest.java"
  if [ -f "$original_test_path" ]; then
    echo "Deleting original JUnit 4 test file: $original_test_path"
    rm "$original_test_path"
  fi

  # Overwrite the AppTest.java file with JUnit 5 specific code
  mkdir -p "$base_test_dir" # Ensure directory exists
  local test_file_path="${base_test_dir}/AppTest.java"
  cat <<EOF >"$test_file_path"
package ${group_id};

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * Unit test for simple App.
 */
class AppTest {
    /**
     * Rigorous Test :-)
     */
    @Test
    void shouldAnswerWithTrue() {
        assertTrue(true);
    }
}
EOF

  POM_PATH="pom.xml" # pom.xml is now in the current directory (project root)
  if [ -f "$POM_PATH" ]; then

    # Define multi-line XML blocks as shell variables
    # Using printf %b to interpret backslash escapes, for clean newlines
    properties_block=$(printf %b "        <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <maven.compiler.release>${java_version}</maven.compiler.release>
            <junit.jupiter.version>5.10.0</junit.jupiter.version>
        </properties>")

    build_block=$(printf %b "    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.2.5</version>
                    <dependencies>
                        <dependency>
                            <groupId>org.junit.jupiter</groupId>
                            <artifactId>junit-jupiter-engine</artifactId>
                            <version>\${junit.jupiter.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <release>\${maven.compiler.release}</release>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <mainClass>${group_id}.App</mainClass> </configuration>
            </plugin>
        </plugins>
    </build>")

    junit5_deps_block=$(printf %b "        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>\${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>\${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>")

    # Create a temporary file for the AWK script
    AWK_SCRIPT=$(mktemp -t pom_awk_XXXXXX.awk)

    # Write the AWK script content to the temporary file
    cat <<'AWK_EOF' >"$AWK_SCRIPT"
            # Initialize flags
            BEGIN {
                in_properties=0;
                in_build=0;
                in_junit4_dep=0;
                skip_current_dep_block=0;
            }

            # --- Deletion Logic ---
            # Delete old <properties> block
            /^[[:space:]]*<properties>/{ in_properties=1; next }
            /^[[:space:]]*<\/properties>/{ if (in_properties) { in_properties=0; next } }
            in_properties { next }

            # Delete old <build> block
            /^[[:space:]]*<build>/{ in_build=1; next }
            /^[[:space:]]*<\/build>/{ if (in_build) { in_build=0; next } }
            in_build { next }

            # Delete old JUnit 4 dependency block (robust range-based deletion)
            /^[[:space:]]*<dependency>/{
                # Check for the start of the JUnit 4 dependency block
                buffer = $0;
                for (i=1; i<=4; i++) { # Read up to 4 more lines, assuming typical dependency block size
                    if (getline line_val > 0) {
                        buffer = buffer "\n" line_val;
                        if (line_val ~ /<\/dependency>/) { break; }
                    } else { break; }
                }
                if (buffer ~ /<groupId>junit<\/groupId>/ && buffer ~ /<artifactId>junit<\/artifactId>/ && buffer ~ /<version>4.11<\/version>/) {
                    skip_current_dep_block = 1; # Mark this entire block for skipping
                } else { print buffer; }
                next;
            }
            /^[[:space:]]*<\/dependency>/{ if (skip_current_dep_block) { skip_current_dep_block = 0; next; } }
            skip_current_dep_block { next } # Skip lines that are part of the JUnit 4 dependency block


            # --- Insertion Logic ---
            # Insert properties block after <modelVersion>
            /^[[:space:]]*<modelVersion>/{
                print;
                print props_var;
                next;
            }

            # Insert JUnit 5 dependencies before </dependencies>
            /^[[:space:]]*<\/dependencies>/{
                print junit5_var;
            }

            # Insert build block before </project>
            /^[[:space:]]*<\/project>/{
                print build_var;
            }

            # Print current line if no specific action was taken or not skipped by deletion logic
            { print }
AWK_EOF
    # Now execute AWK using the temporary script file
    awk -v props_var="$properties_block" \
      -v build_var="$build_block" \
      -v junit5_var="$junit5_deps_block" \
      -f "$AWK_SCRIPT" "$POM_PATH" >"$POM_PATH.tmp" && mv "$POM_PATH.tmp" "$POM_PATH"

    # Clean up temporary AWK script file
    rm "$AWK_SCRIPT"

  else
    echo "Error: pom.xml not found after archetype generation. Cannot apply custom plugins. This is unexpected."
    echo "Exiting due to critical file missing."
    exit 1 # Exit if pom.xml is not found, as it's critical
  fi

  # Create run.sh and README.md (these will be created in the correct project_root_dir due to pushd)
  create_maven_run_script "$(pwd)" "$project_name"
  create_maven_readme "$(pwd)" "$project_name"

  # Return to the original directory where the script was invoked
  popd

  echo -e "\nMaven project '$project_name' created successfully!"
  echo "Navigate to '$project_root_dir'." # Display the correct full path for navigation
  echo "To build and run: './run.sh'"
  echo "Happy coding!"
}

create_ant_project() {
  local project_name=$1
  local group_id=$2    # Ant doesn't use groupId directly, but collected
  local artifact_id=$3 # Ant doesn't use artifactId directly
  local version=$4
  local java_version=$5

  echo "Building Ant project: '$project_name'..."

  # Ant projects typically create the root directory themselves
  mkdir -p "$project_name"
  cd "$project_name" || {
    echo "Failed to enter project directory. Exiting."
    exit 1
  }

  mkdir -p src/main/java
  mkdir -p src/test/java
  mkdir -p lib # For manually managed JARs

  # Create a simple App.java
  cat <<EOF >src/main/java/App.java
public class App {
    public static void main(String[] args) {
        System.out.println("Hello from Ant project: $project_name!");
    }
}
EOF

  # Create a basic build.xml
  cat <<EOF >build.xml
<project name="$project_name" default="dist" basedir=".">
    <description>
        Simple Ant build script for $project_name
    </description>
    <property name="src.dir" location="src/main/java"/>
    <property name="build.dir" location="build"/>
    <property name="dist.dir"  location="dist"/>
    <property name="main.class" value="App"/>
    <property name="java.version" value="${java_version}"/> <path id="project.classpath">
        <fileset dir="lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <target name="init">
        <mkdir dir="\${build.dir}"/>
        <mkdir dir="\${dist.dir}"/>
    </target>

    <target name="compile" depends="init" description="compile the source ">
        <javac srcdir="\${src.dir}" destdir="\${build.dir}" includeantruntime="false"
               source="\${java.version}" target="\${java.version}">
            <classpath refid="project.classpath"/>
        </javac>
    </target>

    <target name="dist" depends="compile" description="generate the distribution">
        <jar jarfile="\${dist.dir}/\${ant.project.name}.jar" basedir="\${build.dir}">
            <manifest>
                <attribute name="Main-Class" value="\${main.class}"/>
            </manifest>
            <zipfileset dir="lib" prefix="lib/" /> </jar>
    </target>

    <target name="run" depends="dist" description="run the application">
        <java jar="\${dist.dir}/\${ant.project.name}.jar" fork="true"/>
    </target>

    <target name="clean" description="clean up">
        <delete dir="\${build.dir}"/>
        <delete dir="\${dist.dir}"/>
    </target>
</project>
EOF

  # Create run.sh and README.md
  create_ant_run_script "$(pwd)" "$project_name"
  create_ant_readme "$(pwd)" "$project_name"

  echo -e "\nAnt project '$project_name' created successfully!"
  echo "Navigate to '$project_name'."
  echo "To build and run: './run.sh'"
  echo "Happy coding!"
}

# --- Main Script Logic ---

if [ -z "$1" ]; then
  echo "Usage: java-init <project_name>"
  exit 1
fi

PROJECT_NAME=$1
# For Maven, use the project name directly as artifactId if DEFAULT_ARTIFACT_ID_PREFIX is empty
ARTIFACT_ID="${DEFAULT_ARTIFACT_ID_PREFIX}${PROJECT_NAME}"
if [ -z "$ARTIFACT_ID" ]; then
  ARTIFACT_ID="$PROJECT_NAME"
fi

echo "--- Java Project Initializer ---"
echo "Project Name: $PROJECT_NAME"
echo ""
echo "Choose a build system:"
echo "  1. Maven"
echo "  2. Ant"
echo "Enter choice (1 or 2):"

read -r CHOICE

case $CHOICE in
1)
  create_maven_project "$PROJECT_NAME" "$DEFAULT_GROUP_ID" "$ARTIFACT_ID" "$DEFAULT_VERSION" "$DEFAULT_JAVA_VERSION"
  ;;
2)
  create_ant_project "$PROJECT_NAME" "$DEFAULT_GROUP_ID" "$ARTIFACT_ID" "$DEFAULT_VERSION" "$DEFAULT_JAVA_VERSION"
  ;;
*)
  echo "Invalid choice. Exiting."
  exit 1
  ;;
esac
